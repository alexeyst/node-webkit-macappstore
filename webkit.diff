diff --git a/Source/core/rendering/RenderThemeChromiumMac.mm b/Source/core/rendering/RenderThemeChromiumMac.mm
index c115c95..bba1353 100644
--- a/Source/core/rendering/RenderThemeChromiumMac.mm
+++ b/Source/core/rendering/RenderThemeChromiumMac.mm
@@ -141,11 +141,11 @@ const double progressAnimationNumFrames = 256;
 @end
 
 // Forward declare Mac SPIs.
-extern "C" {
-void _NSDrawCarbonThemeBezel(NSRect frame, BOOL enabled, BOOL flipped);
-// Request for public API: rdar://13787640
-void _NSDrawCarbonThemeListBox(NSRect frame, BOOL enabled, BOOL flipped, BOOL always_yes);
-}
+// extern "C" {
+// void _NSDrawCarbonThemeBezel(NSRect frame, BOOL enabled, BOOL flipped);
+// // Request for public API: rdar://13787640
+// void _NSDrawCarbonThemeListBox(NSRect frame, BOOL enabled, BOOL flipped, BOOL always_yes);
+// }
 
 namespace blink {
 
@@ -700,7 +700,7 @@ bool RenderThemeChromiumMac::paintTextField(RenderObject* o, const PaintInfo& pa
     // background. We need WebCore to paint styled backgrounds, so we'll use
     // this AppKit SPI function instead.
     if (!useNSTextFieldCell) {
-        _NSDrawCarbonThemeBezel(r, isEnabled(o) && !isReadOnlyControl(o), YES);
+        //_NSDrawCarbonThemeBezel(r, isEnabled(o) && !isReadOnlyControl(o), YES);
         return false;
     }
 #endif
@@ -781,7 +781,7 @@ bool RenderThemeChromiumMac::paintCapsLockIndicator(RenderObject*, const PaintIn
 bool RenderThemeChromiumMac::paintTextArea(RenderObject* o, const PaintInfo& paintInfo, const IntRect& r)
 {
     LocalCurrentGraphicsContext localContext(paintInfo.context, r);
-    _NSDrawCarbonThemeListBox(r, isEnabled(o) && !isReadOnlyControl(o), YES, YES);
+    //_NSDrawCarbonThemeListBox(r, isEnabled(o) && !isReadOnlyControl(o), YES, YES);
     return false;
 }
 
diff --git a/Source/platform/mac/KillRingMac.mm b/Source/platform/mac/KillRingMac.mm
index 63fd8f8..ad6b032 100644
--- a/Source/platform/mac/KillRingMac.mm
+++ b/Source/platform/mac/KillRingMac.mm
@@ -28,56 +28,57 @@
 
 namespace blink {
 
-extern "C" {
+// extern "C" {
 
-// Kill ring calls. Would be better to use NSKillRing.h, but that's not available as API or SPI.
+// // Kill ring calls. Would be better to use NSKillRing.h, but that's not available as API or SPI.
 
-void _NSInitializeKillRing();
-void _NSAppendToKillRing(NSString *);
-void _NSPrependToKillRing(NSString *);
-NSString *_NSYankFromKillRing();
-void _NSNewKillRingSequence();
-void _NSSetKillRingToYankedState();
+// void _NSInitializeKillRing();
+// void _NSAppendToKillRing(NSString *);
+// void _NSPrependToKillRing(NSString *);
+// NSString *_NSYankFromKillRing();
+// void _NSNewKillRingSequence();
+// void _NSSetKillRingToYankedState();
 
-}
+// }
 
 static void initializeKillRingIfNeeded()
 {
     static bool initializedKillRing = false;
     if (!initializedKillRing) {
         initializedKillRing = true;
-        _NSInitializeKillRing();
+        //_NSInitializeKillRing();
     }
 }
 
 void KillRing::append(const String& string)
 {
     initializeKillRingIfNeeded();
-    _NSAppendToKillRing(string);
+    //_NSAppendToKillRing(string);
 }
 
 void KillRing::prepend(const String& string)
 {
     initializeKillRingIfNeeded();
-    _NSPrependToKillRing(string);
+    //_NSPrependToKillRing(string);
 }
 
 String KillRing::yank()
 {
     initializeKillRingIfNeeded();
-    return _NSYankFromKillRing();
+    //return _NSYankFromKillRing();
+    return "";
 }
 
 void KillRing::startNewSequence()
 {
     initializeKillRingIfNeeded();
-    _NSNewKillRingSequence();
+    //_NSNewKillRingSequence();
 }
 
 void KillRing::setToYankedState()
 {
     initializeKillRingIfNeeded();
-    _NSSetKillRingToYankedState();
+    //_NSSetKillRingToYankedState();
 }
 
 } // namespace blink
